âœ… âœ…1. (IoT side) Start the Mosquitto Broker (Option A: Local Mosquitto)

Open Terminal #1 (for Broker Locally):

cd "C:\Program Files\mosquitto"
.\mosquitto.exe -v

âœ…Expected Result:

Starting in local only mode...

Opening ipv4 listen socket on port 1883...

âœ… OR 1. (IoT side) Start the Mosquitto Broker (Option B: Docker Container)

Open Terminal #1 (for Broker via Docker):

docker run -it --rm `
-p 1883:1883 `
-p 9001:9001 `
-v "C:\Users\artur\Desktop\VIA\SEP_4X\Sep 4 Repo\mosquitto_config\mosquitto.conf:/mosquitto/config/mosquitto.conf" `
eclipse-mosquitto

âœ…Expected Result:

Broker starts with your custom configuration
Listening on port 1883 (MQTT) and optionally 9001 (WebSocket)

âœ… 2. (Backend side) Start your Backend API (Subscriber)

Open Terminal #2 (for Backend):

cd "C:\Users\artur\Desktop\VIA\SEP_4X\Sep 4 Backend Repo\Greenhouse-Backend\GreenhouseApi"
dotnet run

âœ…Expected Result:

âœ… Connected to MQTT broker.
ðŸ“¡ Subscribed to topic: greenhouse/sensors

âœ…3. (IoT side) Publish a Test Message

Open Terminal #3 (for Publisher):

cd "C:\Program Files\mosquitto"
.\mosquitto_pub.exe -h localhost -t "greenhouse/sensors" -m '{"sensorType":"Temperature","value":23.5,"timestamp":"2024-05-02T15:00:00"}'

âœ…Expected Result:

Message is published

Backend (Terminal #2) logs:

ðŸ“¥ Received message - Topic: greenhouse/sensors | Message: {"sensorType":"Temperature","value":23.5,"timestamp":"2024-05-02T15:00:00"}
âœ… Sensor reading saved to database.

Important Notes:

Terminal 1 must stay running (Broker active)

Terminal 2 must start after Broker is running

Terminal 3 can send messages after Backend is subscribed